<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对于所有对象都通用的方法</title>
    <url>/my-blog/2020/02/06/%E5%AF%B9%E4%BA%8E%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="覆盖equals时请遵守通用约定"><a href="#覆盖equals时请遵守通用约定" class="headerlink" title="覆盖equals时请遵守通用约定"></a>覆盖equals时请遵守通用约定</h2><p>可以不复写equals方法：</p>
<ul>
<li>类的每个实列本质上都是唯一的</li>
<li>类没有必要提供“逻辑相等”（logical equality）</li>
<li>超类已经覆盖了equals,超类的行为对于这个类也是合适的。</li>
<li>类是私有的，或者是包级别私有的，可以确定它的equals方法永远不会被调用。</li>
</ul>
<p>什么时候应该覆盖equals?</p>
<p>如果类具有自己特有的“逻辑相等”（logical equality）概念，而且超类还没有覆盖equals。这通常属于“值类”（value class）。</p>
<p>在覆盖equals方法的时候，必须要遵守它的通用约定：</p>
<ul>
<li>自反性（reflexive）</li>
<li>对称性（symmetric）</li>
<li>传递性（transitive）</li>
<li>一致性（consistent），多次调用会一致地返回true或false</li>
<li>对于任何非null的应用值x，x.equals(null)必须返回false</li>
</ul>
<p>一些告诫：</p>
<ul>
<li>覆盖equals时总要覆盖hashCode</li>
<li>不要企图让equals方法过于智能</li>
<li>不要将equals声明中的Object对象替换为其他的类型</li>
</ul>
<p>总而言之，不要轻易覆盖equals方法，除非迫不得已。</p>
<h2 id="覆盖equals时总要覆盖hashCode"><a href="#覆盖equals时总要覆盖hashCode" class="headerlink" title="覆盖equals时总要覆盖hashCode"></a>覆盖equals时总要覆盖hashCode</h2><p>如果不这样做的话，会导致该类无法结合所有基于散列的集合一起正常运作，这类集合包括HashMap和HashSet。</p>
<p>hashCode的通用约定：</p>
<ul>
<li>在应用程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对同一个对象的多次调用，hashCode方法都必须始终返回同一个值。在一个应用程序与另一个程序的执行过程中，执行hashCode方法所返回的值可以不一致。</li>
<li>如果两个对象根据equals(Object)方法比较是相等的，那么调用这两个对象中的hashCode方法都必须产生同样的整数结果。</li>
<li>如果两个对象根据equals(Object)方法比较是相等的，那么调用这两个对象中的hashCode方法，则不一定要求hashCode方法必须产生不同的结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提高散列表（hash table）的性能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;Person&gt; personSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    personSet.add(p1);</span><br><span class="line">    personSet.add(p2);</span><br><span class="line">    System.out.println(personSet.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person <span class="keyword">instanceof</span> Person &amp;&amp; id == ((Person) person).getId();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="始终要覆盖toString"><a href="#始终要覆盖toString" class="headerlink" title="始终要覆盖toString"></a>始终要覆盖toString</h2><p>默认toString包含类的名称，以及一个“@”符号，接着是散列码的无符号十六进制表示法，例如PhoneNumber@163b91</p>
<p>提供好的toString实现可以使类用起来更加舒服，使用了这个类的系统也更易于调试。</p>
<h2 id="谨慎地覆盖clone"><a href="#谨慎地覆盖clone" class="headerlink" title="谨慎地覆盖clone"></a>谨慎地覆盖clone</h2><p><strong>Cloneable接口</strong></p>
<p>它决定了Object中受保护的clone方法实现的行为：如果一个类实现了Cloneable，Object的clone方法就返回该对象的逐域拷贝，否则就会抛出CloneNotSupportedException异常。</p>
<p>clone约定：</p>
<ul>
<li>x.clone() != x</li>
<li>x.clone().getClass() == x.getClass()</li>
<li>x.clone().equals(x)</li>
</ul>
<p>不可变的类永远都不应该提供clone方法</p>
<p>实际上，clone方法就是另一个构造器；必须确保它不会伤害到原始的对象，并确保正确地创建被克隆对象中的约束条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        Object result = elements[--size];</span><br><span class="line">        elements[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stack <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Stack result = (Stack) <span class="keyword">super</span>.clone();</span><br><span class="line">        result.elements = elements.clone();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象拷贝的更好的办法是提供一个拷贝器（copy constructor）或拷贝工厂（copy factory）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Yum</span><span class="params">(Yum yum)</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Yum <span class="title">newInstance</span><span class="params">(Yum yum)</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="考虑实现Comparable接口"><a href="#考虑实现Comparable接口" class="headerlink" title="考虑实现Comparable接口"></a>考虑实现Comparable接口</h2><p>一旦类实现了Comparable接口，它就可以跟许多泛型算法（generic algorithm）以及依赖于该接口的集合实现（collection implementation）进行写作。</p>
<p>如果你正在编写一个值类，它具有非常明显的内在排序关系，比如按字母顺序、按数值顺序或者按年代顺序，那你就应该坚决考虑实现Comparable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publisc <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compareTo方法的通用约定：</p>
<p>在下面的说明中，符号sgn(expression)表示数学中的signum函数，它根据表达式（expression）的值为负值、零和正值，分别返回-1、0或1</p>
<ul>
<li>实现者必须确保所有的x和y都满足sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</li>
<li>实现者还必须确保这个比较关系是可传递的：(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)暗示着x.compareTo(z)&gt;0</li>
<li>最后，实现者必须确保x.compareTo(y) == 0暗示着所有的z都满足sgn(x.compareTo(z)) == sgn(y.compareTo(z))</li>
<li>强烈建议(x.compareTo(y) == 0) == (x.equals(y))</li>
</ul>
<p>违反了compareTo约定的类会破会其他依赖于比较关系的类，包括有序集合类TreeSet和TreeMap，以及工具类Collection和Arrays，它们内部包含有搜索和排序算法。</p>
<p>使用Java 8中的比较构造器Comparator：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;PhoneNumber&gt; COMPARATOR = comparingInt(pn -&gt; pn.areaCode)</span><br><span class="line">    .thenComparingInt(pn -&gt; pn.prefix)</span><br><span class="line">    .thenComparingInt(pn -&gt; pn.lineNum);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(PhoneNumber pn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> COMPARATOR.compare(<span class="keyword">this</span>. pn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总而言之，每当实现一个对排序敏感的类时，都应该让这个类实现Comparable接口，以便其实例可以轻松地被分类、搜索，以及用在基于比较的集合中。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java Effective读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot启动过程</title>
    <url>/my-blog/2020/02/06/SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="启动过程概览"><a href="#启动过程概览" class="headerlink" title="启动过程概览"></a>启动过程概览</h2><p>经典的SpringBoot启动代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiveInSpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DiveInSpringBootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终会调用如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br></pre></td></tr></table></figure>

<p>SpringBoot启动大致分为两个过程</p>
<ol>
<li>通过primarySource生成SpringApplication实例</li>
<li>通过run方法运行Spring应用</li>
</ol>
<h2 id="初始化SpringApplication实例"><a href="#初始化SpringApplication实例" class="headerlink" title="初始化SpringApplication实例"></a>初始化SpringApplication实例</h2><p>该过程主要初始化Spring应用运行时依赖的一些组件和默认配置</p>
<p>SpringApplication属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取日志组件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(SpringApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主配置源集合</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Class&lt;?&gt;&gt; primarySources;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置源集合</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; sources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主引导类</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; mainApplicationClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Benner图打印模式，默认在Console中打印，可选值有：</span></span><br><span class="line"><span class="comment">// enum Mode &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//		/**</span></span><br><span class="line"><span class="comment">//		 * Disable printing of the banner.</span></span><br><span class="line"><span class="comment">//		 */</span></span><br><span class="line"><span class="comment">//		OFF,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//		/**</span></span><br><span class="line"><span class="comment">//		 * Print the banner to System.out.</span></span><br><span class="line"><span class="comment">//		 */</span></span><br><span class="line"><span class="comment">//		CONSOLE,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//		/**</span></span><br><span class="line"><span class="comment">//		 * Print the banner to the log file.</span></span><br><span class="line"><span class="comment">//		 */</span></span><br><span class="line"><span class="comment">//		LOG</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="keyword">private</span> Banner.Mode bannerMode = Banner.Mode.CONSOLE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否打印启动日志</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> logStartupInfo = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否应该加入命令行属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> addCommandLineProperties = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConversionService是类型转换服务</span></span><br><span class="line"><span class="comment">// 该标志表示是否加入默认的类型转换服务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> addConversionService = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Banner图组件</span></span><br><span class="line"><span class="keyword">private</span> Banner banner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源加载器组件</span></span><br><span class="line"><span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bean的名称生成器组件</span></span><br><span class="line"><span class="keyword">private</span> BeanNameGenerator beanNameGenerator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Envinroment组件</span></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment environment;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识Context的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;? extends ConfigurableApplicationContext&gt; applicationContextClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用类型，若不指定Spring应用在启动时会自动推断</span></span><br><span class="line"><span class="comment">// 可选值包括：</span></span><br><span class="line"><span class="comment">// 	/**</span></span><br><span class="line"><span class="comment">//	 * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment">//	 * embedded web server.</span></span><br><span class="line"><span class="comment">//	 */</span></span><br><span class="line"><span class="comment">//	NONE,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	/**</span></span><br><span class="line"><span class="comment">//	 * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment">//	 * embedded servlet web server.</span></span><br><span class="line"><span class="comment">//	 */</span></span><br><span class="line"><span class="comment">//	SERVLET,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	/**</span></span><br><span class="line"><span class="comment">//	 * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment">//	 * embedded reactive web server.</span></span><br><span class="line"><span class="comment">//	 */</span></span><br><span class="line"><span class="comment">//	REACTIVE;</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationType webApplicationType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets if the application is headless and should not instantiate AWT. Defaults to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> true&#125; to prevent java icons appearing.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headless if the application is headless</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 和Java AWT有关，我们知道awt是开发桌面程序的框架，可以暂时不管</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> headless = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets if the created &#123;<span class="doctag">@link</span> ApplicationContext&#125; should have a shutdown hook</span></span><br><span class="line"><span class="comment"> * registered. Defaults to &#123;<span class="doctag">@code</span> true&#125; to ensure that JVM shutdowns are handled</span></span><br><span class="line"><span class="comment"> * gracefully.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registerShutdownHook if the shutdown hook should be registered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> registerShutdownHook = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化器组件列表</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ApplicationContextInitializer&lt;?&gt;&gt; initializers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听器组件列表</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ApplicationListener&lt;?&gt;&gt; listeners;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认属性哈希表</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; defaultProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 额外属性集合</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; additionalProfiles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否允许Bean定义被覆盖</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> allowBeanDefinitionOverriding;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否是自定义Enviroment</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isCustomEnvironment = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<p>SpringApplication构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">	Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置主配置源</span></span><br><span class="line">	<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 通过类路径包含的类推断Spring应用的类型</span></span><br><span class="line">	<span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 读取/META-INF/spring.factories文件内容，并设置上下文初始化器</span></span><br><span class="line">	<span class="comment">// 接口类型：org.springframework.context.ApplicationContextInitializer</span></span><br><span class="line">	setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">			ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">			</span><br><span class="line">	<span class="comment">// 读取/META-INF/spring.factories文件内容，并设置应用监听器</span></span><br><span class="line">	<span class="comment">// 接口类型：org.springframework.context.ApplicationListener</span></span><br><span class="line">	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 推断主类（main函数入口所在的类）</span></span><br><span class="line">	<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行run函数"><a href="#运行run函数" class="headerlink" title="运行run函数"></a>运行run函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化秒表，并开始计时</span></span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    </span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// java.awt.headless，和Java AWT有关，我们知道awt是开发桌面程序的框架，可以暂时不管</span></span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取/META-INF/spring.factories文件内容，获取运行时监听器</span></span><br><span class="line">    <span class="comment">// org.springframework.boot.SpringApplicationRunListener</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 注意与ApplicationListener的区别和联系，实际上默认SpringBoot环境中只有一个SpringApplicationRunListener的实现类</span></span><br><span class="line">    <span class="comment">// 就是org.springframework.boot.context.event.EventPublishingRunListener</span></span><br><span class="line">    <span class="comment">// 该类将Spring应用运行的各个阶段封装成相应的SpringApplicationEvent，并触发相应ApplicationListener的监听回调</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 运行监听器监听的各个阶段反应出了Spring应用运行周期的各个阶段，包括：</span></span><br><span class="line">    <span class="comment">// starting</span></span><br><span class="line">    <span class="comment">// environmentPrepared</span></span><br><span class="line">    <span class="comment">// contextPrepared</span></span><br><span class="line">    <span class="comment">// contextLoaded</span></span><br><span class="line">    <span class="comment">// started</span></span><br><span class="line">    <span class="comment">// running</span></span><br><span class="line">    <span class="comment">// failed</span></span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始阶段回调</span></span><br><span class="line">    <span class="comment">// starting</span></span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 封装参数信息</span></span><br><span class="line">    	ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">    			args);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 准备环境</span></span><br><span class="line">    	<span class="comment">// 注意到listeners作为参数传进去了，说明在环境准备的相应阶段，会回调相应的钩子函数</span></span><br><span class="line">    	<span class="comment">// environmentPrepared</span></span><br><span class="line">    	ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">    			applicationArguments);</span><br><span class="line">    			</span><br><span class="line">    	<span class="comment">/**</span></span><br><span class="line"><span class="comment">        * System property that instructs Spring to use the &#123;<span class="doctag">@link</span> Introspector#IGNORE_ALL_BEANINFO&#125;</span></span><br><span class="line"><span class="comment">        * mode when calling the JavaBeans &#123;<span class="doctag">@link</span> Introspector&#125;: "spring.beaninfo.ignore", with a</span></span><br><span class="line"><span class="comment">        * value of "true" skipping the search for &#123;<span class="doctag">@code</span> BeanInfo&#125; classes (typically for scenarios</span></span><br><span class="line"><span class="comment">        * where no such classes are being defined for beans in the application in the first place).</span></span><br><span class="line"><span class="comment">        * &lt;p&gt;The default is "false", considering all &#123;<span class="doctag">@code</span> BeanInfo&#125; metadata classes, like for</span></span><br><span class="line"><span class="comment">        * standard &#123;<span class="doctag">@link</span> Introspector#getBeanInfo(Class)&#125; calls. Consider switching this flag to</span></span><br><span class="line"><span class="comment">        * "true" if you experience repeated ClassLoader access for non-existing &#123;<span class="doctag">@code</span> BeanInfo&#125;</span></span><br><span class="line"><span class="comment">        * classes, in case such access is expensive on startup or on lazy loading.</span></span><br><span class="line"><span class="comment">        * &lt;p&gt;Note that such an effect may also indicate a scenario where caching doesn't work</span></span><br><span class="line"><span class="comment">        * effectively: Prefer an arrangement where the Spring jars live in the same ClassLoader</span></span><br><span class="line"><span class="comment">        * as the application classes, which allows for clean caching along with the application's</span></span><br><span class="line"><span class="comment">        * lifecycle in any case. For a web application, consider declaring a local</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@link</span> org.springframework.web.util.IntrospectorCleanupListener&#125; in &#123;<span class="doctag">@code</span> web.xml&#125;</span></span><br><span class="line"><span class="comment">        * in case of a multi-ClassLoader layout, which will allow for effective caching as well.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@see</span> Introspector#getBeanInfo(Class, int)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    	configureIgnoreBeanInfo(environment);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 打印Banner图</span></span><br><span class="line">    	Banner printedBanner = printBanner(environment);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 创建应用上下文，包含Bean容器相关信息</span></span><br><span class="line">    	<span class="comment">// 实际上会根据webApplicationType的类型创建不同的应用上下文实例</span></span><br><span class="line">    	<span class="comment">// SERVLET: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">    	<span class="comment">// REACTIVE: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class="line">    	<span class="comment">// default: org.springframework.context.annotation.AnnotationConfigApplicationContext</span></span><br><span class="line">    	context = createApplicationContext();</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 从/META-INF/spring.factories中读取错误报告组件</span></span><br><span class="line">    	<span class="comment">// 接口：org.springframework.boot.SpringBootExceptionReporter</span></span><br><span class="line">    	<span class="comment">// 可以看到将context作为参数传入，阅读源码得知错误报告组件构的造器需要传入context，即错误报告组件可以持有应用上下文。</span></span><br><span class="line">    	exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">    			SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">    			new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">    			</span><br><span class="line">    	<span class="comment">// 准备应用上下文</span></span><br><span class="line">    	<span class="comment">// listeners作为参数传入，说明在上下文准备的相应阶段，会回调相应的钩子函数</span></span><br><span class="line">    	<span class="comment">// contextPrepared</span></span><br><span class="line">    	<span class="comment">// contextLoaded</span></span><br><span class="line">    	<span class="comment">// printedBanner也被作为参数传入，查看源码后发现该实列也被注入到了Bean容器中</span></span><br><span class="line">    	<span class="comment">// 还记得SpringApplication构造器中会设置ApplicationContextInitializer，在这里也会依次调用这些初始化器的回调方法</span></span><br><span class="line">    	<span class="comment">// 在这个过程中还会通过primarySource加载一些Bean到容器中，Xml或JavaConfig方式</span></span><br><span class="line">    	prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">    			printedBanner);</span><br><span class="line">    			</span><br><span class="line">    	<span class="comment">// 刷新上下文，大多数Bean是在这里被注入Bean容器的</span></span><br><span class="line">    	refreshContext(context);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 这是个受保护的方法，默认不执行任何操作，子类可以覆盖该方法进行一些扩展</span></span><br><span class="line">    	afterRefresh(context, applicationArguments);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 停止秒表</span></span><br><span class="line">    	stopWatch.stop();</span><br><span class="line">    	<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">    		<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">    				.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 应用启动完成，执行相应监听器的回调</span></span><br><span class="line">    	listeners.started(context);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 实现了ApplicationRunner或CommandLineRunner接口的Bean，会在这里回调对应的run方法</span></span><br><span class="line">    	callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    	handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 应用进入运行阶段，执行相应监听器的回调</span></span><br><span class="line">    	listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    	handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>做个实验，观察Spring应用运行的各个阶段Bean容器中注册的Bean数量</p>
<p>首先，写一个MySpringApplicationRunListener，实现SpringApplicationRunListener接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========== Starting Begin ==========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"Application starting"</span>);</span><br><span class="line">        System.out.println(<span class="string">"=========== Starting End ==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========== Environment Prepared Begin ==========="</span>);</span><br><span class="line">        String[] activeProfiles = environment.getActiveProfiles();</span><br><span class="line">        <span class="keyword">for</span> (String activeProfile : activeProfiles) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Active profile: "</span> + activeProfile);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] defaultProfiles = environment.getDefaultProfiles();</span><br><span class="line">        <span class="keyword">for</span> (String defaultProfile : defaultProfiles) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Default profile: "</span> + defaultProfile);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=========== Environment Prepared End ==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Prepared Begin ==========="</span>);</span><br><span class="line">        printBeanNames(context);</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Prepared End ==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Loaded Begin ==========="</span>);</span><br><span class="line">        printBeanNames(context);</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Loaded End ==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Started Begin ==========="</span>);</span><br><span class="line">        printBeanNames(context);</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Started End ==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Running Begin ==========="</span>);</span><br><span class="line">        printBeanNames(context);</span><br><span class="line">        System.out.println(<span class="string">"=========== Context Running End ==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBeanNames</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bean Count: "</span> + context.getBeanDefinitionCount());</span><br><span class="line">        String[] beanNames = context.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : beanNames) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，添加/META-INF/spring.factories</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">fung.diveinspringboot.listener.MySpringApplicationRunListener</span><br></pre></td></tr></table></figure>

<p>这样自制的监听器就会被Spring应用读取</p>
<p>启动应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiveInSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> SpringApplicationBuilder(DiveInSpringBootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">MyConfig</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>) // 非<span class="title">Web</span>应用启动</span></span><br><span class="line"><span class="class">                .<span class="title">logStartupInfo</span>(<span class="title">false</span>) // 关掉启动日志</span></span><br><span class="line"><span class="class">                .<span class="title">bannerMode</span>(<span class="title">Banner</span>.<span class="title">Mode</span>.<span class="title">OFF</span>) // 不打印<span class="title">Banner</span></span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">myTestBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"My test bean"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看下打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">=========== Starting Begin ===========</span><br><span class="line">Application starting</span><br><span class="line">=========== Starting End ===========</span><br><span class="line">=========== Environment Prepared Begin ===========</span><br><span class="line">Default profile: default</span><br><span class="line">=========== Environment Prepared End ===========</span><br><span class="line">=========== Context Prepared Begin ===========</span><br><span class="line">Bean Count: 5</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">=========== Context Prepared End ===========</span><br><span class="line">=========== Context Loaded Begin ===========</span><br><span class="line">Bean Count: 7</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">diveInSpringBootApplication</span><br><span class="line">diveInSpringBootApplication.MyConfig</span><br><span class="line">=========== Context Loaded End ===========</span><br><span class="line">=========== Context Started Begin ===========</span><br><span class="line">Bean Count: 62</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">diveInSpringBootApplication</span><br><span class="line">diveInSpringBootApplication.MyConfig</span><br><span class="line">org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><br><span class="line">profileBootstrap</span><br><span class="line">testConfiguration</span><br><span class="line">myFirstLevelRepository</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationPackages</span><br><span class="line">helloWorld</span><br><span class="line">myTestBean</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.condition.BeanTypeRegistry</span><br><span class="line">propertySourcesPlaceholderConfigurer</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</span><br><span class="line">taskExecutorBuilder</span><br><span class="line">applicationTaskExecutor</span><br><span class="line">spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration</span><br><span class="line">defaultValidator</span><br><span class="line">methodValidationPostProcessor</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</span><br><span class="line">mbeanExporter</span><br><span class="line">objectNamingStrategy</span><br><span class="line">mbeanServer</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration</span><br><span class="line">standardJacksonObjectMapperBuilderCustomizer</span><br><span class="line">spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration</span><br><span class="line">jacksonObjectMapperBuilder</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration</span><br><span class="line">parameterNamesModule</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration</span><br><span class="line">jacksonObjectMapper</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</span><br><span class="line">jsonComponentModule</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration</span><br><span class="line">stringHttpMessageConverter</span><br><span class="line">spring.http-org.springframework.boot.autoconfigure.http.HttpProperties</span><br><span class="line">org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration</span><br><span class="line">mappingJackson2HttpMessageConverter</span><br><span class="line">org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</span><br><span class="line">messageConverters</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration</span><br><span class="line">loggingCodecCustomizer</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration</span><br><span class="line">jacksonCodecCustomizer</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</span><br><span class="line">spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</span><br><span class="line">taskSchedulerBuilder</span><br><span class="line">spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class="line">restTemplateBuilder</span><br><span class="line">=========== Context Started End ===========</span><br><span class="line">=========== Context Running Begin ===========</span><br><span class="line">Bean Count: 62</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">diveInSpringBootApplication</span><br><span class="line">diveInSpringBootApplication.MyConfig</span><br><span class="line">org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><br><span class="line">profileBootstrap</span><br><span class="line">testConfiguration</span><br><span class="line">myFirstLevelRepository</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationPackages</span><br><span class="line">helloWorld</span><br><span class="line">myTestBean</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.condition.BeanTypeRegistry</span><br><span class="line">propertySourcesPlaceholderConfigurer</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</span><br><span class="line">taskExecutorBuilder</span><br><span class="line">applicationTaskExecutor</span><br><span class="line">spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration</span><br><span class="line">defaultValidator</span><br><span class="line">methodValidationPostProcessor</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</span><br><span class="line">mbeanExporter</span><br><span class="line">objectNamingStrategy</span><br><span class="line">mbeanServer</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration</span><br><span class="line">standardJacksonObjectMapperBuilderCustomizer</span><br><span class="line">spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration</span><br><span class="line">jacksonObjectMapperBuilder</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration</span><br><span class="line">parameterNamesModule</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration</span><br><span class="line">jacksonObjectMapper</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</span><br><span class="line">jsonComponentModule</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration</span><br><span class="line">stringHttpMessageConverter</span><br><span class="line">spring.http-org.springframework.boot.autoconfigure.http.HttpProperties</span><br><span class="line">org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration</span><br><span class="line">mappingJackson2HttpMessageConverter</span><br><span class="line">org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</span><br><span class="line">messageConverters</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration</span><br><span class="line">loggingCodecCustomizer</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration</span><br><span class="line">jacksonCodecCustomizer</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</span><br><span class="line">spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</span><br><span class="line">taskSchedulerBuilder</span><br><span class="line">spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class="line">restTemplateBuilder</span><br><span class="line">=========== Context Running End ===========</span><br></pre></td></tr></table></figure>

<p>可以看到Context创建好后，通过getSpringFactoriesInstances方法往容器中加入了5个内置Bean：</p>
<ul>
<li>org.springframework.context.annotation.internalConfigurationAnnotationProcessor</li>
<li>org.springframework.context.annotation.internalAutowiredAnnotationProcessor</li>
<li>org.springframework.context.annotation.internalCommonAnnotationProcessor</li>
<li>org.springframework.context.event.internalEventListenerProcessor</li>
<li>org.springframework.context.event.internalEventListenerFactory</li>
</ul>
<p>然后通过prepareContext方法又向容器中加入了两个Bean:</p>
<ul>
<li>diveInSpringBootApplication</li>
<li>diveInSpringBootApplication.MyConfig</li>
</ul>
<p>最后通过refreshContext方法把大量相关Bean加入了容器</p>
<p>着重分析下refreshContext方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">	refresh(context);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			context.registerShutdownHook();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">			<span class="comment">// Not allowed in some environments.</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">	Assert.isInstanceOf(AbstractApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">applicationContext</span>)</span>;</span><br><span class="line">	((AbstractApplicationContext) applicationContext).refresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.context.ConfigurableApplicationContext</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load or refresh the persistent representation of the configuration,</span></span><br><span class="line"><span class="comment"> * which might an XML file, properties file, or relational database schema.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As this is a startup method, it should destroy already created singletons</span></span><br><span class="line"><span class="comment"> * if it fails, to avoid dangling resources. In other words, after invocation</span></span><br><span class="line"><span class="comment"> * of that method, either all or no singletons at all should be instantiated.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException if the bean factory could not be initialized</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if already initialized and multiple refresh</span></span><br><span class="line"><span class="comment"> * attempts are not supported</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 刷新操作顾名思义，当每次调用该方法都会使上下文环境变成一个最初的状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.context.support.AbstractApplicationContext</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    	<span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">    	<span class="comment">// 刷新前的准备工作，包括</span></span><br><span class="line">    	<span class="comment">// 1. 初始化属性源（模板方法，由子类实现）</span></span><br><span class="line">    	<span class="comment">// 2. 校验环境中是否包含必要的属性</span></span><br><span class="line">    	prepareRefresh();</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">    	<span class="comment">// 调用抽象方法refreshBeanFactory，让子类刷新bean工厂</span></span><br><span class="line">    	ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">    	<span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Configure the factory's standard context characteristics,</span></span><br><span class="line"><span class="comment">        * such as the context's ClassLoader and post-processors.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> beanFactory the BeanFactory to configure</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    	prepareBeanFactory(beanFactory);</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">try</span> &#123;</span><br><span class="line">    		<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">    		<span class="comment">/**</span></span><br><span class="line"><span class="comment">            * Modify the application context's internal bean factory after its standard</span></span><br><span class="line"><span class="comment">            * initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment">            * will have been instantiated yet. This allows for registering special</span></span><br><span class="line"><span class="comment">            * BeanPostProcessors etc in certain ApplicationContext implementations.</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 注意理解Bean定义和Bean实例之间的区别和联系</span></span><br><span class="line">            <span class="comment">// 用于处理@Configuration注解的ConfigurationClassPostProcessor也是此时被实例化的，</span></span><br><span class="line">            <span class="comment">// 并通过回调postProcessBeanDefinitionRegistry和postProcessBeanFactory方法把配置的Bean注册进容器</span></span><br><span class="line">    		postProcessBeanFactory(beanFactory);</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">    		<span class="comment">/**</span></span><br><span class="line"><span class="comment">            * Instantiate and invoke all registered BeanFactoryPostProcessor beans,</span></span><br><span class="line"><span class="comment">            * respecting explicit order if given.</span></span><br><span class="line"><span class="comment">            * &lt;p&gt;Must be called before singleton instantiation.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 此处开始实例化BeanFactoryPostProcessor类型及其子类型的Bean，并按设定的优先级调用相应的回调方法</span></span><br><span class="line">            <span class="comment">// 注意理解BeanFactoryPostProcessor和BeanPostProcessor的区别和联系</span></span><br><span class="line">    		invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">    		<span class="comment">// 注册BeanPostProcessor</span></span><br><span class="line">    		<span class="comment">// 注意理解BeanFactoryPostProcessor和BeanPostProcessor的区别和联系</span></span><br><span class="line">    		registerBeanPostProcessors(beanFactory);</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Initialize message source for this context.</span></span><br><span class="line">    		initMessageSource();</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">    		<span class="comment">// 接口：ApplicationEventMulticaster</span></span><br><span class="line">    		initApplicationEventMulticaster();</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">    		<span class="comment">// 模板方法，子类可以覆盖该方法完成特定的Bean实例化逻辑</span></span><br><span class="line">    		onRefresh();</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">    		<span class="comment">// 注册ApplicationListener&lt;?&gt;</span></span><br><span class="line">    		<span class="comment">// getApplicationEventMulticaster().addApplicationListener(listener);</span></span><br><span class="line">    		<span class="comment">// 注意理解ApplicationEventMulticaster和ApplicationListener&lt;?&gt;之间的联系</span></span><br><span class="line">    		registerListeners();</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    	    <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * Finish the initialization of this context's bean factory,</span></span><br><span class="line"><span class="comment">            * initializing all remaining singleton beans.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 从源码中可以看到，该方法通过调用beanFactory的preInstantiateSingletons方法实例化那些非懒加载（non-lazy-init）的单例Bean</span></span><br><span class="line">            <span class="comment">// 经过这个方法之后，所有该实例化的Bean基本都被实例化了</span></span><br><span class="line">    		finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">    		<span class="comment">// publishEvent(new ContextRefreshedEvent(this));</span></span><br><span class="line">    		finishRefresh();</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">    			logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">    					<span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">    		&#125;</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">    		destroyBeans();</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Reset 'active' flag.</span></span><br><span class="line">    		cancelRefresh(ex);</span><br><span class="line">    </span><br><span class="line">    		<span class="comment">// Propagate exception to caller.</span></span><br><span class="line">    		<span class="keyword">throw</span> ex;</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">finally</span> &#123;</span><br><span class="line">    		<span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">    		<span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">    		resetCommonCaches();</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>源码分析</category>
      </categories>
  </entry>
  <entry>
    <title>@SpringBootApplication注解详解</title>
    <url>/my-blog/2020/02/05/SpringBootApplication%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>@SpringBootApplication注解标识一个类为Spring应用启动类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiveInSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DiveInSpringBootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@SpringBootApplication源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">		<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">	Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment">	 * applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor</span>(annotation = EnableAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">	String[] excludeName() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Base packages to scan for annotated components. Use &#123;<span class="doctag">@link</span> #scanBasePackageClasses&#125;</span></span><br><span class="line"><span class="comment">	 * for a type-safe alternative to String-based package names.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> base packages to scan</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span>)</span><br><span class="line">	String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Type-safe alternative to &#123;<span class="doctag">@link</span> #scanBasePackages&#125; for specifying the packages to</span></span><br><span class="line"><span class="comment">	 * scan for annotated components. The package of each class specified will be scanned.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;</span></span><br><span class="line"><span class="comment">	 * Consider creating a special no-op marker class or interface in each package that</span></span><br><span class="line"><span class="comment">	 * serves no purpose other than being referenced by this attribute.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> base packages to scan</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor</span>(annotation = ComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span>)</span><br><span class="line">	Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@ComponentScan标识该应用具备组件扫描功能，默认会对启动类所在包的子包进行扫描，往容器中加入被标记为组件的类。可以通过scanBasePackages属性更改扫描的包。</p>
<p>@SpringBootConfiguration等同于@Configuration，使得在启动类中也可以使用@Bean注解注入Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableAutoConfiguration启动了SpringBoot的自动配置功能</p>
<p>这里做一个实验</p>
<p>首先，在启动类上不加任何注解，打印出容器中注册的Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(EnableAutoConfigurationBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">        String[] beanNames = context.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : beanNames) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">enableAutoConfigurationBootstrap</span><br><span class="line">org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><br></pre></td></tr></table></figure>

<p>可以看到仅有internalXXX的Bean和启动类Bean被注入到容器中，ineternalXXX是Spring应用的内置Bean。</p>
<p>然后，在启动类上加上@EnableAutoConfiguration注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(EnableAutoConfigurationBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">        String[] beanNames = context.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : beanNames) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">enableAutoConfigurationBootstrap</span><br><span class="line">org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationPackages</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.condition.BeanTypeRegistry</span><br><span class="line">propertySourcesPlaceholderConfigurer</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</span><br><span class="line">taskExecutorBuilder</span><br><span class="line">applicationTaskExecutor</span><br><span class="line">spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor</span><br><span class="line">org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration</span><br><span class="line">defaultValidator</span><br><span class="line">methodValidationPostProcessor</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</span><br><span class="line">mbeanExporter</span><br><span class="line">objectNamingStrategy</span><br><span class="line">mbeanServer</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration</span><br><span class="line">standardJacksonObjectMapperBuilderCustomizer</span><br><span class="line">spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration</span><br><span class="line">jacksonObjectMapperBuilder</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration</span><br><span class="line">parameterNamesModule</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration</span><br><span class="line">jacksonObjectMapper</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</span><br><span class="line">jsonComponentModule</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration</span><br><span class="line">stringHttpMessageConverter</span><br><span class="line">spring.http-org.springframework.boot.autoconfigure.http.HttpProperties</span><br><span class="line">org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration</span><br><span class="line">mappingJackson2HttpMessageConverter</span><br><span class="line">org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</span><br><span class="line">messageConverters</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration</span><br><span class="line">loggingCodecCustomizer</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration</span><br><span class="line">jacksonCodecCustomizer</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</span><br><span class="line">spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</span><br><span class="line">taskSchedulerBuilder</span><br><span class="line">spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class="line">restTemplateBuilder</span><br></pre></td></tr></table></figure>

<p>可以看到多注入了很多Bean，那么这些Bean做了些什么，又是怎么来的呢？</p>
<p><strong>这些Bean做了什么？</strong></p>
<p>以RestTemplateAutoConfiguration为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(HttpMessageConvertersAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">RestTemplate</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RestTemplateAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ObjectProvider&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ObjectProvider&lt;RestTemplateCustomizer&gt; restTemplateCustomizers;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RestTemplateAutoConfiguration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ObjectProvider&lt;HttpMessageConverters&gt; messageConverters,</span></span></span><br><span class="line"><span class="function"><span class="params">			ObjectProvider&lt;RestTemplateCustomizer&gt; restTemplateCustomizers)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.messageConverters = messageConverters;</span><br><span class="line">		<span class="keyword">this</span>.restTemplateCustomizers = restTemplateCustomizers;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RestTemplateBuilder <span class="title">restTemplateBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		RestTemplateBuilder builder = <span class="keyword">new</span> RestTemplateBuilder();</span><br><span class="line">		HttpMessageConverters converters = <span class="keyword">this</span>.messageConverters.getIfUnique();</span><br><span class="line">		<span class="keyword">if</span> (converters != <span class="keyword">null</span>) &#123;</span><br><span class="line">			builder = builder.messageConverters(converters.getConverters());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		List&lt;RestTemplateCustomizer&gt; customizers = <span class="keyword">this</span>.restTemplateCustomizers</span><br><span class="line">				.orderedStream().collect(Collectors.toList());</span><br><span class="line">		<span class="keyword">if</span> (!CollectionUtils.isEmpty(customizers)) &#123;</span><br><span class="line">			builder = builder.customizers(customizers);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> builder;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.client;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplate</span> <span class="keyword">extends</span> <span class="title">InterceptingHttpAccessor</span> <span class="keyword">implements</span> <span class="title">RestOperations</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到当ClassPath中包含org.springframework.web.client.RestTemplate时，会往容器中注入RestTemplateAutoConfiguration配置类，而该配置类通过@Bean注解注入了RestTemplateBuilder类型的Bean。</p>
<p>RestTemplate包含在spring-web项目中，通过如下的maven配置就可以引入该类：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更多的时候是通过starter的方式引入该依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这些Bean怎么来的？</strong></p>
<p>在spring-boot-autoconfigure的jar包中有一个spring.factories文件，里面有如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityRequestMatcherProviderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br></pre></td></tr></table></figure>

<p>可以这样理解，当启动类加上了@EnableAutoConfiguration注解后，Spring应用启动时就会搜索类路径下/META-INF/spring.factories文件，并向JVM中加载org.springframework.boot.autoconfigure.EnableAutoConfiguration指定的自动配置类，这些配置类都加上了@Configuration注解。大部分配置类也加上了@Conditional注解，只有满足条件的配置类会被加入容器。@Configuration注解的类又可以通过@Bean和@Conditional注解往容器中条件地注入Bean，就这样完成了Spring应用的自动装配。</p>
<p>注意：Spring启动时并不会加载所有EnableAutoConfiguration指定的类，而是会先读取/META-INF/spring-autoconfigure-metadata.properties文件的数据，这里面包含一些元数据可以提前把一些不满足条件的配置类给过滤掉。</p>
<p>@EnableAutoConfiguration源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment">	 * applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationPackages</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(AutoConfigurationPackages<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEAN = AutoConfigurationPackages<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Determine if the auto-configuration base packages for the given bean factory are</span></span><br><span class="line"><span class="comment">	 * available.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanFactory the source bean factory</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if there are auto-config packages available</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beanFactory.containsBean(BEAN) &amp;&amp; !get(beanFactory).isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the auto-configuration base packages for the given bean factory.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanFactory the source bean factory</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> a list of auto-configuration packages</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IllegalStateException if auto-configuration is not enabled</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">get</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> beanFactory.getBean(BEAN, BasePackages<span class="class">.<span class="keyword">class</span>).<span class="title">get</span>()</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">					<span class="string">"Unable to retrieve @EnableAutoConfiguration base packages"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Programmatically registers the auto-configuration package names. Subsequent</span></span><br><span class="line"><span class="comment">	 * invocations will add the given package names to those that have already been</span></span><br><span class="line"><span class="comment">	 * registered. You can use this method to manually define the base packages that will</span></span><br><span class="line"><span class="comment">	 * be used for a given &#123;<span class="doctag">@link</span> BeanDefinitionRegistry&#125;. Generally it's recommended that</span></span><br><span class="line"><span class="comment">	 * you don't call this method directly, but instead rely on the default convention</span></span><br><span class="line"><span class="comment">	 * where the package name is set from your &#123;<span class="doctag">@code</span> <span class="doctag">@EnableAutoConfiguration</span>&#125;</span></span><br><span class="line"><span class="comment">	 * configuration class or classes.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry the bean definition registry</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> packageNames the package names to set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(BeanDefinitionRegistry registry, String... packageNames)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (registry.containsBeanDefinition(BEAN)) &#123;</span><br><span class="line">			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN);</span><br><span class="line">			ConstructorArgumentValues constructorArguments = beanDefinition</span><br><span class="line">					.getConstructorArgumentValues();</span><br><span class="line">			constructorArguments.addIndexedArgumentValue(<span class="number">0</span>,</span><br><span class="line">					addBasePackages(constructorArguments, packageNames));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			GenericBeanDefinition beanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line">			beanDefinition.setBeanClass(BasePackages<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">			beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">0</span>,</span><br><span class="line">					packageNames);</span><br><span class="line">			beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">			registry.registerBeanDefinition(BEAN, beanDefinition);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String[] addBasePackages(</span><br><span class="line">			ConstructorArgumentValues constructorArguments, String[] packageNames) &#123;</span><br><span class="line">		String[] existing = (String[]) constructorArguments</span><br><span class="line">				.getIndexedArgumentValue(<span class="number">0</span>, String[]<span class="class">.<span class="keyword">class</span>).<span class="title">getValue</span>()</span>;</span><br><span class="line">		Set&lt;String&gt; merged = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">		merged.addAll(Arrays.asList(existing));</span><br><span class="line">		merged.addAll(Arrays.asList(packageNames));</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(merged);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125; to store the base package from the importing</span></span><br><span class="line"><span class="comment">	 * configuration.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">				BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">			register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImport(metadata));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Wrapper for a package import.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageImport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> String packageName;</span><br><span class="line"></span><br><span class="line">		PackageImport(AnnotationMetadata metadata) &#123;</span><br><span class="line">			<span class="keyword">this</span>.packageName = ClassUtils.getPackageName(metadata.getClassName());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getPackageName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.packageName;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (obj == <span class="keyword">null</span> || getClass() != obj.getClass()) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.packageName.equals(((PackageImport) obj).packageName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.packageName.hashCode();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Package Import "</span> + <span class="keyword">this</span>.packageName;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Holder for the base package (name may be null to indicate no scanning).</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePackages</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; packages;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">boolean</span> loggedBasePackageInfo;</span><br><span class="line"></span><br><span class="line">		BasePackages(String... names) &#123;</span><br><span class="line">			List&lt;String&gt; packages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			<span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.hasText(name)) &#123;</span><br><span class="line">					packages.add(name);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.packages = packages;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>.loggedBasePackageInfo) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.packages.isEmpty()) &#123;</span><br><span class="line">					<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">						logger.warn(<span class="string">"@EnableAutoConfiguration was declared on a class "</span></span><br><span class="line">								+ <span class="string">"in the default package. Automatic @Repository and "</span></span><br><span class="line">								+ <span class="string">"@Entity scanning is not enabled."</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">						String packageNames = StringUtils</span><br><span class="line">								.collectionToCommaDelimitedString(<span class="keyword">this</span>.packages);</span><br><span class="line">						logger.debug(<span class="string">"@EnableAutoConfiguration was declared on a class "</span></span><br><span class="line">								+ <span class="string">"in the package '"</span> + packageNames</span><br><span class="line">								+ <span class="string">"'. Automatic @Repository and @Entity scanning is "</span></span><br><span class="line">								+ <span class="string">"enabled."</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">this</span>.loggedBasePackageInfo = <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.packages;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationImportSelector</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">ResourceLoaderAware</span>,</span></span><br><span class="line"><span class="class">		<span class="title">BeanFactoryAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AutoConfigurationEntry EMPTY_ENTRY = <span class="keyword">new</span> AutoConfigurationEntry();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NO_IMPORTS = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory</span><br><span class="line">			.getLog(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = <span class="string">"spring.autoconfigure.exclude"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ClassLoader beanClassLoader;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">		&#125;</span><br><span class="line">		AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">				.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">		AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class="line">				autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the &#123;<span class="doctag">@link</span> AutoConfigurationEntry&#125; based on the &#123;<span class="doctag">@link</span> AnnotationMetadata&#125;</span></span><br><span class="line"><span class="comment">	 * of the importing &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> autoConfigurationMetadata the auto-configuration metadata</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> annotationMetadata the annotation metadata of the configuration class</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the auto-configurations that should be imported</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			AutoConfigurationMetadata autoConfigurationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">			AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">		&#125;</span><br><span class="line">		AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">		List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">				attributes);</span><br><span class="line">		configurations = removeDuplicates(configurations);</span><br><span class="line">		Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">		checkExcludedClasses(configurations, exclusions);</span><br><span class="line">		configurations.removeAll(exclusions);</span><br><span class="line">		configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">		fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Class&lt;? extends Group&gt; getImportGroup() &#123;</span><br><span class="line">		<span class="keyword">return</span> AutoConfigurationGroup<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (getClass() == AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> getEnvironment().getProperty(</span><br><span class="line">					EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">					<span class="title">true</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the appropriate &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; from the</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> AnnotationMetadata&#125;. By default this method will return attributes for</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> #getAnnotationClass()&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> metadata the annotation metadata</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> annotation attributes</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AnnotationAttributes <span class="title">getAttributes</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">		String name = getAnnotationClass().getName();</span><br><span class="line">		AnnotationAttributes attributes = AnnotationAttributes</span><br><span class="line">				.fromMap(metadata.getAnnotationAttributes(name, <span class="keyword">true</span>));</span><br><span class="line">		Assert.notNull(attributes,</span><br><span class="line">				() -&gt; <span class="string">"No auto-configuration attributes found. Is "</span></span><br><span class="line">						+ metadata.getClassName() + <span class="string">" annotated with "</span></span><br><span class="line">						+ ClassUtils.getShortName(name) + <span class="string">"?"</span>);</span><br><span class="line">		<span class="keyword">return</span> attributes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the source annotation class used by the selector.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the annotation class</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getAnnotationClass() &#123;</span><br><span class="line">		<span class="keyword">return</span> EnableAutoConfiguration<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the auto-configuration class names that should be considered. By default</span></span><br><span class="line"><span class="comment">	 * this method will load candidates using &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; with</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> #getSpringFactoriesLoaderFactoryClass()&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> metadata the source metadata</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> attributes the &#123;<span class="doctag">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class="line"><span class="comment">	 * attributes&#125;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> a list of candidate configurations</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">			AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">		Assert.notEmpty(configurations,</span><br><span class="line">				<span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">						+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line">		<span class="keyword">return</span> configurations;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the class used by &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125; to load configuration</span></span><br><span class="line"><span class="comment">	 * candidates.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the factory class</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">		<span class="keyword">return</span> EnableAutoConfiguration<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkExcludedClasses</span><span class="params">(List&lt;String&gt; configurations,</span></span></span><br><span class="line"><span class="function"><span class="params">			Set&lt;String&gt; exclusions)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; invalidExcludes = <span class="keyword">new</span> ArrayList&lt;&gt;(exclusions.size());</span><br><span class="line">		<span class="keyword">for</span> (String exclusion : exclusions) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ClassUtils.isPresent(exclusion, getClass().getClassLoader())</span><br><span class="line">					&amp;&amp; !configurations.contains(exclusion)) &#123;</span><br><span class="line">				invalidExcludes.add(exclusion);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!invalidExcludes.isEmpty()) &#123;</span><br><span class="line">			handleInvalidExcludes(invalidExcludes);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Handle any invalid excludes that have been specified.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> invalidExcludes the list of invalid excludes (will always have at least one</span></span><br><span class="line"><span class="comment">	 * element)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleInvalidExcludes</span><span class="params">(List&lt;String&gt; invalidExcludes)</span> </span>&#123;</span><br><span class="line">		StringBuilder message = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="keyword">for</span> (String exclude : invalidExcludes) &#123;</span><br><span class="line">			message.append(<span class="string">"\t- "</span>).append(exclude).append(String.format(<span class="string">"%n"</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String</span><br><span class="line">				.format(<span class="string">"The following classes could not be excluded because they are"</span></span><br><span class="line">						+ <span class="string">" not auto-configuration classes:%n%s"</span>, message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return any exclusions that limit the candidate configurations.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> metadata the source metadata</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> attributes the &#123;<span class="doctag">@link</span> #getAttributes(AnnotationMetadata) annotation</span></span><br><span class="line"><span class="comment">	 * attributes&#125;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> exclusions or an empty set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Set&lt;String&gt; <span class="title">getExclusions</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">			AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">		Set&lt;String&gt; excluded = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">		excluded.addAll(asList(attributes, <span class="string">"exclude"</span>));</span><br><span class="line">		excluded.addAll(Arrays.asList(attributes.getStringArray(<span class="string">"excludeName"</span>)));</span><br><span class="line">		excluded.addAll(getExcludeAutoConfigurationsProperty());</span><br><span class="line">		<span class="keyword">return</span> excluded;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getExcludeAutoConfigurationsProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (getEnvironment() <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">			Binder binder = Binder.get(getEnvironment());</span><br><span class="line">			<span class="keyword">return</span> binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">					.map(Arrays::asList).orElse(Collections.emptyList());</span><br><span class="line">		&#125;</span><br><span class="line">		String[] excludes = getEnvironment()</span><br><span class="line">				.getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="keyword">return</span> (excludes != <span class="keyword">null</span>) ? Arrays.asList(excludes) : Collections.emptyList();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filter</span><span class="params">(List&lt;String&gt; configurations,</span></span></span><br><span class="line"><span class="function"><span class="params">			AutoConfigurationMetadata autoConfigurationMetadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">		String[] candidates = StringUtils.toStringArray(configurations);</span><br><span class="line">		<span class="keyword">boolean</span>[] skip = <span class="keyword">new</span> <span class="keyword">boolean</span>[candidates.length];</span><br><span class="line">		<span class="keyword">boolean</span> skipped = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (AutoConfigurationImportFilter filter : getAutoConfigurationImportFilters()) &#123;</span><br><span class="line">			invokeAwareMethods(filter);</span><br><span class="line">			<span class="keyword">boolean</span>[] match = filter.match(candidates, autoConfigurationMetadata);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; match.length; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!match[i]) &#123;</span><br><span class="line">					skip[i] = <span class="keyword">true</span>;</span><br><span class="line">					candidates[i] = <span class="keyword">null</span>;</span><br><span class="line">					skipped = <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!skipped) &#123;</span><br><span class="line">			<span class="keyword">return</span> configurations;</span><br><span class="line">		&#125;</span><br><span class="line">		List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(candidates.length);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!skip[i]) &#123;</span><br><span class="line">				result.add(candidates[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			<span class="keyword">int</span> numberFiltered = configurations.size() - result.size();</span><br><span class="line">			logger.trace(<span class="string">"Filtered "</span> + numberFiltered + <span class="string">" auto configuration class in "</span></span><br><span class="line">					+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)</span><br><span class="line">					+ <span class="string">" ms"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> List&lt;AutoConfigurationImportFilter&gt; <span class="title">getAutoConfigurationImportFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SpringFactoriesLoader.loadFactories(AutoConfigurationImportFilter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">				<span class="title">this</span>.<span class="title">beanClassLoader</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">removeDuplicates</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(list));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> List&lt;String&gt; <span class="title">asList</span><span class="params">(AnnotationAttributes attributes, String name)</span> </span>&#123;</span><br><span class="line">		String[] value = attributes.getStringArray(name);</span><br><span class="line">		<span class="keyword">return</span> Arrays.asList((value != <span class="keyword">null</span>) ? value : <span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fireAutoConfigurationImportEvents</span><span class="params">(List&lt;String&gt; configurations,</span></span></span><br><span class="line"><span class="function"><span class="params">			Set&lt;String&gt; exclusions)</span> </span>&#123;</span><br><span class="line">		List&lt;AutoConfigurationImportListener&gt; listeners = getAutoConfigurationImportListeners();</span><br><span class="line">		<span class="keyword">if</span> (!listeners.isEmpty()) &#123;</span><br><span class="line">			AutoConfigurationImportEvent event = <span class="keyword">new</span> AutoConfigurationImportEvent(<span class="keyword">this</span>,</span><br><span class="line">					configurations, exclusions);</span><br><span class="line">			<span class="keyword">for</span> (AutoConfigurationImportListener listener : listeners) &#123;</span><br><span class="line">				invokeAwareMethods(listener);</span><br><span class="line">				listener.onAutoConfigurationImportEvent(event);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> List&lt;AutoConfigurationImportListener&gt; <span class="title">getAutoConfigurationImportListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SpringFactoriesLoader.loadFactories(AutoConfigurationImportListener<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">				<span class="title">this</span>.<span class="title">beanClassLoader</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareMethods</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">			<span class="keyword">if</span> (instance <span class="keyword">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class="line">				((BeanClassLoaderAware) instance)</span><br><span class="line">						.setBeanClassLoader(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instance <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">				((BeanFactoryAware) instance).setBeanFactory(<span class="keyword">this</span>.beanFactory);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instance <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span><br><span class="line">				((EnvironmentAware) instance).setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instance <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class="line">				((ResourceLoaderAware) instance).setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		Assert.isInstanceOf(ConfigurableListableBeanFactory<span class="class">.<span class="keyword">class</span>, <span class="title">beanFactory</span>)</span>;</span><br><span class="line">		<span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.beanClassLoader = classLoader;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> ClassLoader <span class="title">getBeanClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.beanClassLoader;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.environment = environment;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Environment <span class="title">getEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationGroup</span> <span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>.<span class="title">Group</span>,</span></span><br><span class="line"><span class="class">			<span class="title">BeanClassLoaderAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, AnnotationMetadata&gt; entries = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> List&lt;AutoConfigurationEntry&gt; autoConfigurationEntries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> ClassLoader beanClassLoader;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> AutoConfigurationMetadata autoConfigurationMetadata;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.beanClassLoader = classLoader;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(AnnotationMetadata annotationMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">				DeferredImportSelector deferredImportSelector)</span> </span>&#123;</span><br><span class="line">			Assert.state(</span><br><span class="line">					deferredImportSelector <span class="keyword">instanceof</span> AutoConfigurationImportSelector,</span><br><span class="line">					() -&gt; String.format(<span class="string">"Only %s implementations are supported, got %s"</span>,</span><br><span class="line">							AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>(),</span></span><br><span class="line"><span class="class">							<span class="title">deferredImportSelector</span>.<span class="title">getClass</span>().<span class="title">getName</span>()))</span>;</span><br><span class="line">			AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">					.getAutoConfigurationEntry(getAutoConfigurationMetadata(),</span><br><span class="line">							annotationMetadata);</span><br><span class="line">			<span class="keyword">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class="line">			<span class="keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class="line">				<span class="keyword">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Iterable&lt;Entry&gt; <span class="title">selectImports</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.autoConfigurationEntries.isEmpty()) &#123;</span><br><span class="line">				<span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">			&#125;</span><br><span class="line">			Set&lt;String&gt; allExclusions = <span class="keyword">this</span>.autoConfigurationEntries.stream()</span><br><span class="line">					.map(AutoConfigurationEntry::getExclusions)</span><br><span class="line">					.flatMap(Collection::stream).collect(Collectors.toSet());</span><br><span class="line">			Set&lt;String&gt; processedConfigurations = <span class="keyword">this</span>.autoConfigurationEntries.stream()</span><br><span class="line">					.map(AutoConfigurationEntry::getConfigurations)</span><br><span class="line">					.flatMap(Collection::stream)</span><br><span class="line">					.collect(Collectors.toCollection(LinkedHashSet::<span class="keyword">new</span>));</span><br><span class="line">			processedConfigurations.removeAll(allExclusions);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> sortAutoConfigurations(processedConfigurations,</span><br><span class="line">					getAutoConfigurationMetadata())</span><br><span class="line">							.stream()</span><br><span class="line">							.map((importClassName) -&gt; <span class="keyword">new</span> Entry(</span><br><span class="line">									<span class="keyword">this</span>.entries.get(importClassName), importClassName))</span><br><span class="line">							.collect(Collectors.toList());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> AutoConfigurationMetadata <span class="title">getAutoConfigurationMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.autoConfigurationMetadata == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">						.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.autoConfigurationMetadata;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">sortAutoConfigurations</span><span class="params">(Set&lt;String&gt; configurations,</span></span></span><br><span class="line"><span class="function"><span class="params">				AutoConfigurationMetadata autoConfigurationMetadata)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationSorter(getMetadataReaderFactory(),</span><br><span class="line">					autoConfigurationMetadata).getInPriorityOrder(configurations);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> MetadataReaderFactory <span class="title">getMetadataReaderFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.beanFactory.getBean(</span><br><span class="line">						SharedMetadataReaderFactoryContextInitializer.BEAN_NAME,</span><br><span class="line">						MetadataReaderFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> CachingMetadataReaderFactory(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationEntry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; configurations;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; exclusions;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="title">AutoConfigurationEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.configurations = Collections.emptyList();</span><br><span class="line">			<span class="keyword">this</span>.exclusions = Collections.emptySet();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Create an entry with the configurations that were contributed and their</span></span><br><span class="line"><span class="comment">		 * exclusions.</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@param</span> configurations the configurations that should be imported</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@param</span> exclusions the exclusions that were applied to the original list</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		AutoConfigurationEntry(Collection&lt;String&gt; configurations,</span><br><span class="line">				Collection&lt;String&gt; exclusions) &#123;</span><br><span class="line">			<span class="keyword">this</span>.configurations = <span class="keyword">new</span> ArrayList&lt;&gt;(configurations);</span><br><span class="line">			<span class="keyword">this</span>.exclusions = <span class="keyword">new</span> HashSet&lt;&gt;(exclusions);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getConfigurations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.configurations;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getExclusions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.exclusions;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>源码分析</category>
      </categories>
  </entry>
  <entry>
    <title>创建和销毁对象</title>
    <url>/my-blog/2020/02/04/%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="用户静态方法代替构造器"><a href="#用户静态方法代替构造器" class="headerlink" title="用户静态方法代替构造器"></a>用户静态方法代替构造器</h2><h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? Boolean.TRUE : Boolean.False;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比普通构造器，有如下好处：</p>
<ul>
<li>有名称，便于阅读</li>
<li>不必在每次调用它们的时候都创建一个新对象</li>
<li>可以返回原返回类型的任何子类型的对象</li>
<li>所返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值</li>
<li>方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不存在</li>
</ul>
<p>缺点：</p>
<ul>
<li>类如果不含公有的或者受保护的构造器，就不能被子类化</li>
</ul>
<p>静态工厂方法 一些惯用名称：</p>
<p><strong>from</strong></p>
<p>类型转换方法，它只有单个参数，返回该类型的一个相对应的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date d = <span class="function">Date <span class="title">from</span><span class="params">(instance)</span> </span>;</span><br></pre></td></tr></table></figure>

<p><strong>of</strong></p>
<p>带有多个参数，返回该类型的一个实例，把它们合并起来，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Rank&gt; faceCards = EnumSet.of(JACK, QUEEN, KING);</span><br></pre></td></tr></table></figure>

<p><strong>valueOf</strong></p>
<p>比from和of更烦琐的种替代方法，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE);</span><br></pre></td></tr></table></figure>

<p><strong>instance或者getInstance</strong></p>
<p>返回的实例是通过方法的（如有）参数来描述的，但是不能说与参数具有同样的值，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StackWalker luke = StackWalker.getInstance(options);</span><br></pre></td></tr></table></figure>

<p><strong>create或者newIntance</strong></p>
<p>像instance或者getInstance一样，但create或者newInstance能够确保每次调用都返回一个新的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object newArray = Array.newInstance(classObject, arrayLen);</span><br></pre></td></tr></table></figure>

<p><strong>getType</strong></p>
<p>像getInstance一样，但是在工厂方法处于不同的类中的时候使用。Type表示工厂方法所返回的对象类型，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileStore fs = Files.getFileStore(path);</span><br></pre></td></tr></table></figure>

<p><strong>newType</strong></p>
<p>像newInstance一样，但是在工厂方法处于不同的类中的时候使用。Type表示工厂方法所返回的对象类型，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = Files.newBufferedReader(path);</span><br></pre></td></tr></table></figure>

<p><strong>type</strong></p>
<p>getType和newType的简版，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Complain&gt; litany = Collections.list(legacyLitany);</span><br></pre></td></tr></table></figure>

<h2 id="遇到多个构造器参数时要考虑使用构造器"><a href="#遇到多个构造器参数时要考虑使用构造器" class="headerlink" title="遇到多个构造器参数时要考虑使用构造器"></a>遇到多个构造器参数时要考虑使用构造器</h2><p>一个不好的实践：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts(<span class="number">240</span>, <span class="number">8</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">27</span>);</span><br></pre></td></tr></table></figure>

<p>JavaBean模式的改进：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts();</span><br><span class="line">cocaCola.setServingSize(<span class="number">240</span>);</span><br><span class="line">cocaCola.setServings(<span class="number">8</span>);</span><br><span class="line">cocaCola.setCalories(<span class="number">100</span>);</span><br><span class="line">cocaCola.setSodium(<span class="number">35</span>);</span><br><span class="line">cocaCola.setCarbohydrate(<span class="number">27</span>);</span><br></pre></td></tr></table></figure>

<p>Builder模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</span><br><span class="line">    .calories(<span class="number">100</span>)</span><br><span class="line">    .sodium(<span class="number">35</span>)</span><br><span class="line">    .carbohydrate(<span class="number">27</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<p>如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder模式就是一种不错的选择。</p>
<h2 id="用私有构造器或者枚举类型强化Singleton属性"><a href="#用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或者枚举类型强化Singleton属性"></a>用私有构造器或者枚举类型强化Singleton属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单元素枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过私有构造器强化不可实例化的能力"><a href="#通过私有构造器强化不可实例化的能力" class="headerlink" title="通过私有构造器强化不可实例化的能力"></a>通过私有构造器强化不可实例化的能力</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优先考虑依赖注入来引用资源"><a href="#优先考虑依赖注入来引用资源" class="headerlink" title="优先考虑依赖注入来引用资源"></a>优先考虑依赖注入来引用资源</h2><p>有许多类会依赖一个或多个底层的资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Lexicon dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dictionary = Objects.requireNonNull(dictionary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><p><strong>DON’T DO THIS!</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"bikini"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>DO THIS</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">"bikini"</span>;</span><br></pre></td></tr></table></figure>

<p>对于所有在同一台虚拟机中运行的代码，只要它们包含相同的字符串字面常量，该对象就会被重用。</p>
<p><strong>缓存“昂贵的对象”</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.matches(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0, 3&#125;)"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然String.matches方法最易于查看一个字符串是否与正则表达式相匹配，但并不适合在注重性能的情形中重复使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumberals</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern.compile(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0, 3&#125;)"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ROMAN.matcher(s).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱</strong></p>
<h2 id="消除过期的对象引用"><a href="#消除过期的对象引用" class="headerlink" title="消除过期的对象引用"></a>消除过期的对象引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        <span class="keyword">return</span> elements[--size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>防止内存泄漏：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    Object result = elements[--size];</span><br><span class="line">    elements[size] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>只要类是自己管理内存，程序员就应该警惕内存泄漏问题</strong></p>
<p>一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。</p>
<p><strong>内存泄漏的另一个常见来源是缓存</strong></p>
<p>一旦你把对象引用放到缓存中，它就很容易被遗忘掉，从而使得它不再有用之后很长一段时间内仍然留在缓存中</p>
<p><strong>内存泄漏的第三个常见来源是监听器和其他回调</strong></p>
<h2 id="避免使用终结方法和清楚方法"><a href="#避免使用终结方法和清楚方法" class="headerlink" title="避免使用终结方法和清楚方法"></a>避免使用终结方法和清楚方法</h2><p>终结方法（finalizer）通常是不可预测的，也是很危险的，一般情况下是不必要的。</p>
<p>在Java 9中清楚方法（cleaner）代替了终结方法。清楚方法没有终结方法那么危险，但仍然是不可预测、运行缓慢，一般情况下也是不必要的。</p>
<p><strong>永远不应该依赖终结方法或者清楚方法来更新重要的持久状态</strong></p>
<p>清除资源的正确做法：让类实现AutoCloseable，并要求客户端在每个实例不再需要的时候调用close方法，一般是利用try-with-resources确保终止，即使遇到异常也是如此。</p>
<h2 id="try-with-resources优先于try-finally"><a href="#try-with-resources优先于try-finally" class="headerlink" title="try-with-resources优先于try-finally"></a>try-with-resources优先于try-finally</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String src, String dst)</span> trows IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(dst)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = in.read(buf)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">               out.write(buf, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Java Effective读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>test</title>
    <url>/my-blog/2019/09/06/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>SpringFramwork</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/my-blog/2019/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>SpringFramwork</category>
      </categories>
      <tags>
        <tag>快速实践</tag>
      </tags>
  </entry>
</search>
